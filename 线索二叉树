#include<iostream>
using namespace std;
typedef int TElemType;
typedef enum {Link,Thread} PointerTag;/* Link==0表示指向左右孩子的指针 */
									 /* Thread==1表示指向前驱或后驱的线索 */
typedef struct BiThrNode
{
	TElemType data;
	struct BiThrNode* lchild, * rchild;
	PointerTag LTag;
	PointerTag RTag;				 /* 左右标志 */
}BiThrNode,*BiThrTree;

BiThrTree pre;/* 全局变量，始终指向刚刚访问过的结点 */
/* 中序遍历进行中序线索化 */
void InThreading(BiThrTree p)
{
	if (p)
	{
		InThreading(p->lchild);/*  递归左子树线索化 */
		if (!p->lchild)		   /*  没有孩子 */
		{
			p->LTag == Thread; /*  前驱线索 */
			p->lchild = pre;   /* 左孩子指针指向前驱 */
		}
		if (!pre->rchild)	   /*  前驱没有右孩子 */
		{
			pre->RTag = Thread;/*  后驱线索 */
			pre->rchild = p;   /* 前驱右孩子指针指向后继（当前节点p） */
		}
		pre = p;			   /*  保持pre指向p的前驱 */
		InThreading(p->rchild);/*  递归右子树线索化 */
	}
}

/* T指向头节点，头节点左链lchild指向根节点，头节点右链rchild指向中序遍历的 */
/* 最后一个结点。中序遍历二叉线索表示的二叉树 */
bool InOrderTraverse_Thr(BiThrTree T)
{
	BiThrTree p;
	p = T->lchild;	/* p指向根结点 */
	while (p != T)	/* 空树或遍历结束时,p==T */
	{
		while (p->LTag == Link)/* 当LTag==0时循环到中序序列第一个结点 */
			p = p->lchild;
		printf("%c", p->data);
		while (p->RTag == Thread && p->rchild != T)
		{
			p = p->rchild;
			printf("%c", p->data);
		}
		p = p->rchild;
	}
	return true;
}

